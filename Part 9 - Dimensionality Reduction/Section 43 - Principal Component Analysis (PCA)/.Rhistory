nba <- nba[,2:20]
nba_matrix <- data.matrix(nba)
nba
View(nba)
output.formatted <- output
row.names(output.formatted)
row.names(output.formatted) <- datetime
output.formatted
View(output.formatted)
rm(list = ls())
#library(RCurl)
#library(httr)
#library(devtools)
#library(plyr)
#library(RSiteCatalyst)
#library(stringr)
# User Inputs
#inputdir = "C:\\Users\\sainath.gaddam\\Desktop\\Pranab"
#setwd(inputdir) # working directory
library(RSiteCatalyst)
SCAuth("sainath.gaddam@accenture.com:MINI", "8f8e63238400697dd6bbfac70c4233ac")
rs <- GetReportSuites()
Profile <- "mini.de.digitalwebsite"
from.date = "2017-12-01"
to.date   = "2017-12-15"
PID=Profile[1]
output <-     QueueOvertime(PID ,from.date, to.date,c("pageviews","event13","event17","event21","event11","event15","event19","event70"), date.granularity="day",max.attempts=1000)
output.formatted <- output
keeps <- names(output.formatted)
keeps<- keeps[8:length(keeps)]
keeps <- c("datetime", keeps)
output.formatted <- output.formatted[keeps]
datetime <- output.formatted$datetime
row.names(output.formatted)
row.names(output.formatted) <- datetime
View(output.formatted)
output.formatted$datetime <- NULL
output.formatted<- transform(output.formatted, prod=Reduce(`*`, output.formatted))
output.formatted <- output.formatted$prod
View(output.formatted)
row.names(output.formatted)
row.names(output.formatted)
output.formatted[output.formatted != 0] <- 1
row.names(output.formatted) <- datetime
dim(output.formatted)
class(output.formatted)
View(output.formatted)
output.formatted <- data.frame(datetime, output.formatted)
View(output.formatted)
row.names(output.formatted)
row.names(output.formatted) <- datetime
row.names(output.formatted)
View(output.formatted)
output.formatted$datetime <- NULL
View(output.formatted)
trps <- t(output.formatted)
View(trps)
class(trps)
nba_heatmap <- heatmap(trps, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
dim(trps)
colnames(trps)
rownames(trps)
rownames(trps) <- Profile
View(trps)
class(trps)
dim(trps)
trps1 <- trps
rbind(trps, trps)
View(rbind(trps, trps))
class(rbind(trps, trps))
showit <- rbind(trps, trps)
nba_heatmap <- heatmap(nba_heatmap)
nba_heatmap <- heatmap(showit)
nba_heatmap <- heatmap(showit)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),]
row.names(nba) <- nba$Name
nba <- nba[,2:20]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
nba_matrix
View(nba_matrix)
View(showit)
View(showit)
heatmap(nba_matrix)
nba_heatmap <- heatmap(showit, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
nba_heatmap <- heatmap(showit, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(5,10))
nba_heatmap <- heatmap(showit, Rowv=NA, Colv=NA, col = heat.colors(256), scale="none", margins=c(5,10))
nba_heatmap <- heatmap(showit, Rowv=NA, Colv=NA, scale="none", margins=c(5,10))
install.packages("plotly")
library("plotly")
plot_ly(z = showit, type = "heatmap")
install.packages("highcharter"
)
library(highcharter)
library(tidyr)
library(dplyr)
hchart(showit, "heatmap", hcaes(x = variable, y = name, value = value)) %>%
hc_colorAxis(stops = color_stops(2, c("red","green")))
hchart(showit, "heatmap", hcaes(x = variable, y = name, value = value)) %>%
hc_colorAxis(stops = color_stops(2, c("red","green")))
rm(list = ls())
rm(list = ls())
#library(RCurl)
#library(httr)
#library(devtools)
#library(plyr)
#library(RSiteCatalyst)
#library(stringr)
# User Inputs
#inputdir = "C:\\Users\\sainath.gaddam\\Desktop\\Pranab"
#setwd(inputdir) # working directory
library(RSiteCatalyst)
SCAuth("sainath.gaddam@accenture.com:MINI", "8f8e63238400697dd6bbfac70c4233ac")
rs <- GetReportSuites()
Profile <- "mini.de.digitalwebsite"
from.date = "2017-12-01"
to.date   = "2017-12-15"
PID=Profile[1]
output <-     QueueOvertime(PID ,from.date, to.date,c("pageviews","event13","event17","event21","event11","event15","event19","event70"), date.granularity="day",max.attempts=1000)
output.formatted <- output
keeps <- names(output.formatted)
keeps<- keeps[8:length(keeps)]
keeps <- c("datetime", keeps)
output.formatted <- output.formatted[keeps]
datetime <- output.formatted$datetime
output.formatted$datetime <- NULL
output.formatted<- transform(output.formatted, prod=Reduce(`*`, output.formatted))
output.formatted <- output.formatted$prod
output.formatted[output.formatted != 0] <- 1
row.names(output.formatted) <- datetime
output.formatted <- data.frame(datetime, output.formatted)
row.names(output.formatted) <- datetime
output.formatted$datetime <- NULL
trps <- t(output.formatted)
rownames(trps) <- Profile
hchart(showit, "heatmap", hcaes(x = variable, y = name, value = value)) %>% hc_colorAxis(stops = color_stops(2, c("red","green")))
showit <- rbind(trps, trps)
hchart(showit, "heatmap", hcaes(x = variable, y = name, value = value)) %>% hc_colorAxis(stops = color_stops(2, c("red","green")))
rs
rs$rsid
class(rs)
class(rs$rsid)
markets = rs$rsid[grepl("digitalwebsite",rs$rsid)]
markets
rm(list = ls())
library(RSiteCatalyst)
SCAuth("sainath.gaddam@accenture.com:MINI", "8f8e63238400697dd6bbfac70c4233ac")
rs <- GetReportSuites()
markets = rs$rsid[grepl("digitalwebsite",rs$rsid)]
Profile <- "mini.de.digitalwebsite"
final <- data.frame()
for(market in markets){
from.date = "2017-12-01"
to.date   = "2017-12-15"
#PID=Profile[1]
PID=market
output <-     QueueOvertime(PID ,from.date, to.date,c("pageviews","event13","event17","event21","event11","event15","event19","event70"), date.granularity="day",max.attempts=1000)
output.formatted <- output
keeps <- names(output.formatted)
keeps<- keeps[8:length(keeps)]
keeps <- c("datetime", keeps)
output.formatted <- output.formatted[keeps]
datetime <- output.formatted$datetime
output.formatted$datetime <- NULL
output.formatted<- transform(output.formatted, prod=Reduce(`*`, output.formatted))
output.formatted <- output.formatted$prod
output.formatted[output.formatted != 0] <- 1
row.names(output.formatted) <- datetime
output.formatted <- data.frame(datetime, output.formatted)
row.names(output.formatted) <- datetime
output.formatted$datetime <- NULL
trps <- t(output.formatted)
rownames(trps) <- PID
final <- rbind(final, trps)
}
trps
market
markets
rm(list = ls())
#library(RCurl)
#library(httr)
#library(devtools)
#library(plyr)
#library(RSiteCatalyst)
#library(stringr)
# User Inputs
#inputdir = "C:\\Users\\sainath.gaddam\\Desktop\\Pranab"
#setwd(inputdir) # working directory
library(RSiteCatalyst)
SCAuth("sainath.gaddam@accenture.com:MINI", "8f8e63238400697dd6bbfac70c4233ac")
rs <- GetReportSuites()
markets = rs$rsid[grepl("digitalwebsite",rs$rsid)]
Profile <- "mini.de.digitalwebsite"
final <- data.frame()
for(market in markets){
from.date = "2017-12-01"
to.date   = "2017-12-15"
#PID=Profile[1]
PID=market
output <-     QueueOvertime(PID ,from.date, to.date,c("pageviews","event13","event17","event21","event11","event15","event19","event70"), date.granularity="day",max.attempts=1000)
print(paste("31"))
output.formatted <- output
keeps <- names(output.formatted)
keeps<- keeps[8:length(keeps)]
keeps <- c("datetime", keeps)
output.formatted <- output.formatted[keeps]
datetime <- output.formatted$datetime
output.formatted$datetime <- NULL
output.formatted<- transform(output.formatted, prod=Reduce(`*`, output.formatted))
output.formatted <- output.formatted$prod
output.formatted[output.formatted != 0] <- 1
row.names(output.formatted) <- datetime
output.formatted <- data.frame(datetime, output.formatted)
row.names(output.formatted) <- datetime
output.formatted$datetime <- NULL
trps <- t(output.formatted)
rownames(trps) <- PID
final <- rbind(final, trps)
}
datetime
output
head(output.formatted)
row.names(output.formatted)
row.names(output.formatted) <- datetime
datetime
length(output.formatted)
output.formatted <- data.frame(datetime, output.formatted)
row.names(output.formatted) <- datetime
output.formatted$datetime <- NULL
trps <- t(output.formatted)
rownames(trps) <- PID
final <- rbind(final, trps)
final
View(final)
rm(list = ls())
#library(RCurl)
#library(httr)
#library(devtools)
#library(plyr)
#library(RSiteCatalyst)
#library(stringr)
# User Inputs
#inputdir = "C:\\Users\\sainath.gaddam\\Desktop\\Pranab"
#setwd(inputdir) # working directory
library(RSiteCatalyst)
SCAuth("sainath.gaddam@accenture.com:MINI", "8f8e63238400697dd6bbfac70c4233ac")
rs <- GetReportSuites()
markets = rs$rsid[grepl("digitalwebsite",rs$rsid)]
Profile <- "mini.de.digitalwebsite"
final <- data.frame()
for(market in markets){
from.date = "2017-12-01"
to.date   = "2017-12-15"
#PID=Profile[1]
PID=market
output <-     QueueOvertime(PID ,from.date, to.date,c("pageviews","event13","event17","event21","event11","event15","event19","event70"), date.granularity="day",max.attempts=1000)
print(paste("31"))
output.formatted <- output
keeps <- names(output.formatted)
keeps<- keeps[8:length(keeps)]
keeps <- c("datetime", keeps)
output.formatted <- output.formatted[keeps]
datetime <- output.formatted$datetime
output.formatted$datetime <- NULL
output.formatted<- transform(output.formatted, prod=Reduce(`*`, output.formatted))
output.formatted <- output.formatted$prod
output.formatted[output.formatted != 0] <- 1
output.formatted <- data.frame(datetime, output.formatted)
row.names(output.formatted) <- datetime
output.formatted$datetime <- NULL
trps <- t(output.formatted)
rownames(trps) <- PID
final <- rbind(final, trps)
}
View(final)
dim(final)
length(markets)
hchart(final, "heatmap", hcaes(x = variable, y = name, value = value)) %>% hc_colorAxis(stops = color_stops(2, c("red","green")))
class(final)
View(as.matrix(final))
hchart(as.matrix(final), "heatmap", hcaes(x = variable, y = name, value = value)) %>% hc_colorAxis(stops = color_stops(2, c("red","green")))
hchart(as.matrix(final), "heatmap", hcaes(x = variable, y = name, value = value)) %>% hc_colorAxis(stops = color_stops(2, c("red","green")))
View(output)
library(ggplot2)
library(reshape2)
library(plyr)
library(scales)
df <- structure(list(people = structure(c(2L, 1L), .Label = c("Dwayne", "LeBron"), class = "factor"),
G = c(1L, 0L),
MIN = c(1L, 0L),
PTS = c(0L, 1L),
FGM = c(0L,0L),
FGA = c(0L,0L),
FGP = c(1L,1L)),
.Names = c("people", "G", "MIN", "PTS", "FGM", "FGA", "FGP"),
class = "data.frame",
row.names = c(NA, -2L))
df.m <- melt(df)
df1.m <- ddply(df.m, .(variable), transform, rescale = value)
p <- ggplot(df1.m, aes(variable, people)) +
geom_tile(aes(fill = rescale), colour = "black")
p + scale_fill_gradient(low = "green", high = "red")
show(p)
p <- ggplot(df1.m, aes(variable, people)) +
geom_tile(aes(fill = rescale), colour = "black")
p + scale_fill_gradient(low = "green", high = "red")
rm(list = ls())
par(mfrow=c(70,5))
x <- rnorm(200)
y <- 25 - 22*x + 5*x^2 + rnorm(200)
for i in range(350):
for i in range(350){print(i)}
for(i in range(350)){print(i)}
for(i in 1:length(350)){print(i)}
for(i in seq(350)){print(i)}
for(i in seq(350)){boxplot(x, horizontal=TRUE, axes=FALSE)
plot(0, type="n", xlab="", ylab="", axes=FALSE)
}
for(i in seq(10)){boxplot(x, horizontal=TRUE, axes=FALSE)
plot(0, type="n", xlab="", ylab="", axes=FALSE)
}
for(i in seq(2)){boxplot(x, horizontal=TRUE, axes=FALSE)
plot(0, type="n", xlab="", ylab="", axes=FALSE)
}
plot(c(1,2), c(4,6))
rm(list = ls())
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv)
nba$Name <- with(nba, reorder(Name, PTS))
library(ggplot2)
nba.m <- melt(nba)
nba.m <- ddply(nba.m, .(variable), transform,
+     rescale = rescale(value))
(p <- ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale),
+     colour = "white") + scale_fill_gradient(low = "white",
+     high = "steelblue"))
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")
View(nba)
View(nba)
nba$Name <- with(nba, reorder(Name, PTS))
library(ggplot2)
nba.m <- melt(nba)
library(reshape)
install.packages("reshape")
library(reshape)
nba.m <- melt(nba)
nba.m <- ddply(nba.m, .(variable), transform,
+     rescale = rescale(value))
nba.m <- ddply(nba.m, .(variable), transform, rescale = rescale(value))
install.packages("plyr", dependencies = TRUE)
install.packages("plyr")
install.packages("plyr")
library(plyr)
ba <- read.csv("http://datasets.flowingdata.com/ppg2008.cs)
")"
rm(list = ls())
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")
nba$Name <- with(nba, reorder(Name, PTS))
library(ggplot2)
nba.m <- melt(nba)
nba.m <- ddply(nba.m, .(variable), transform, rescale = rescale(value))
library(reshape)
nba.m <- melt(nba)
library(reshape)
install.packages("‘plyr")
library(reshape)
library(plyr)
options(repos="http://streaming.stat.iastate.edu/CRAN")
install.packages("plyr")
options("repos")[[1]][1]
install.packages("C:\\Users\\sainath.gaddam\\Downloads\\plyr_1.8.tar.gz", repos = NULL)
library("plyr")
rm(list = ls())
library(RSiteCatalyst)
SCAuth("sainath.gaddam@accenture.com:MINI", "8f8e63238400697dd6bbfac70c4233ac")
library(RSiteCatalyst)
SCAuth("sainath.gaddam@accenture.com:MINI", "8f8e63238400697dd6bbfac70c4233ac")
rm(list = ls())
rm(list = ls())
#library(RCurl)
#library(httr)
#library(devtools)
#library(plyr)
#library(RSiteCatalyst)
#library(stringr)
# User Inputs
#inputdir = "C:\\Users\\sainath.gaddam\\Desktop\\Pranab"
#setwd(inputdir) # working directory
library(XLConnect)
library(highcharter)
library(RSiteCatalyst)
SCAuth("sainath.gaddam@accenture.com:MINI", "8f8e63238400697dd6bbfac70c4233ac")
SCAuth("sainath.gaddam@accenture.com:MINI", "8f8e63238400697dd6bbfac70c4233ac")
rm(list = ls())
rm(list = ls())
#library(RCurl)
#library(httr)
#library(devtools)
#library(plyr)
#library(RSiteCatalyst)
#library(stringr)
# User Inputs
#inputdir = "C:\\Users\\sainath.gaddam\\Desktop\\Pranab"
#setwd(inputdir) # working directory
library(XLConnect)
library(highcharter)
library(RSiteCatalyst)
SCAuth("sainath.gaddam@accenture.com:MINI", "8f8e63238400697dd6bbfac70c4233ac")
rm(list = ls())
library(XLConnect)
library(highcharter)
library(RSiteCatalyst)
SCAuth("sainath.gaddam@accenture.com:MINI", "8f8e63238400697dd6bbfac70c4233ac")
rm(list = ls())
#library(RCurl)
#library(httr)
#library(devtools)
#library(plyr)
#library(RSiteCatalyst)
#library(stringr)
# User Inputs
#inputdir = "C:\\Users\\sainath.gaddam\\Desktop\\Pranab"
#setwd(inputdir) # working directory
library(XLConnect)
library(highcharter)
library(RSiteCatalyst)
SCAuth("sainath.gaddam@accenture.com:MINI", "8f8e63238400697dd6bbfac70c4233ac")
rs <- GetReportSuites()
#markets = rs$rsid[grepl("digital",rs$rsid) & !grepl("minitemplate|miniadobeapitest",rs$rsid)]
markets = readWorksheetFromFile("Mini_RS.XLSX", sheet = "NSC",startRow = 0, startCol = 0, endCol = 0)
final <- data.frame()
for(market in markets$Reporting.Suites[1:10]){
#market ="mini.at.digitalwebsite"
from.date = "2017-12-01"
to.date   = "2017-12-15"
#PID=Profile[1]
PID=market
output <-     QueueOvertime(PID ,from.date, to.date,c("pageviews","event13","event17","event21","event11","event15","event19","event70"), date.granularity="day",max.attempts=1000)
print(paste("generated output for the market: ", PID))
output.formatted <- output
keeps <- names(output.formatted)
keeps<- keeps[8:length(keeps)]
keeps <- c("datetime", keeps)
output.formatted <- output.formatted[keeps]
datetime <- output.formatted$datetime
output.formatted$datetime <- NULL
output.formatted<- transform(output.formatted, prod=Reduce(`*`, output.formatted))
output.formatted <- output.formatted$prod
output.formatted[output.formatted != 0] <- 1
output.formatted <- data.frame(datetime, output.formatted)
row.names(output.formatted) <- datetime
output.formatted$datetime <- NULL
trps <- t(output.formatted)
rownames(trps) <- PID
final <- rbind(final, trps)
print(paste("dim of final df is: ", dim(final)))
}
rm(list = ls())
library(RSiteCatalyst)
SCAuth("sainath.gaddam@accenture.com:MINI", "8f8e63238400697dd6bbfac70c4233ac")
rm(list = ls())
rm(list = ls())
library(RSiteCatalyst)
SCAuth("sainath.gaddam@accenture.com:MINI", "8f8e63238400697dd6bbfac70c4233ac")
remove.packages()
remove.packages(RSiteCatalyst)
library(RSiteCatalyst)
uninstall.packages(RSiteCatalyst)
remove.packages(RSiteCatalyst)
setwd("C:/Users/sainath.gaddam/Desktop/Machine Learning A-Z")
setwd("C:/Users/sainath.gaddam/Desktop/Machine Learning A-Z/Part 9 - Dimensionality Reduction/Section 43 - Principal Component Analysis (PCA)")
# PCA
# Importing the dataset
dataset = read.csv('Wine.csv')
View(dataset)
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
library(caret)
library(e1071)
pca = preProcess(x = training_set[-14], method = 'pca', pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[c(2, 3, 1)]
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)]
library(e1071)
classifier = svm(formula = Customer_Segment ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'PC1', ylab = 'PC2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
