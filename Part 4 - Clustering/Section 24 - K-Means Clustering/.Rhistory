barplot(table(state.region))
barplot(table(state.region), cex.names = 0.5)
barplot(prop.table(table(state.region)), cex.names = 0.5)
barplot(table(state.region), cex.names = 0.5)
barplot(prop.table(table(state.region)), cex.names = 0.5)
barplot(table(state.region), cex.names = 0.5)
barplot(prop.table(table(state.region)), cex.names = 0.5)
?par
x <- 5:9
x
y <- (x < 7)
y
x <- c(3,7,NA)
y <- c(NA,1,a)
y <- c(NA,1,2)
x+y
sum(x)
sum(x, na.rm = TRUE)
is.na(x)
x[is.na(x)]
x[!is.na(x)]
version
mod <- lm(dist ~ speed, data = cars)
mean(mod$residuals)
par(mfrow = c(2,2))
mod_1 <- lm(mpg ~ disp, data = mtcars)
plot(mod_1)
library(swirl)
swirl()
swirl()
library(car)
mod2 <- lm(mpg ~ ., data = mtcars)
vif(mod2)
summary(mod2)
library(carrplot)
install.packages(carrplot)
install.packages("corrplot")
library(carrplot)
library(corrplot)
cor(mtcars[,-1])
corrplot(cor(mtcars[,-1]))
mod <- lm(mpg ~ cyl + gear, data = mtcars)
summary(mod)
vif(mod = )
vif(mod)
par(mfrow=c(2,2))
mod <- lm(dist ~ speed, data = cars)
plot(mod)
install.packages("gvlma")
library(gvlma)
gvlma::gvlma(mod)
mod <- lm(dist ~ speed, data=cars[-c(23, 35, 49), ])
gvlma::gvlma(mod)
rm(list=ls(all=TRUE)) #clear all objects in workspace
install.packages("RGoogleAnalytics")
install.packages("httpuv")
install.packages("Rcpp")
install.packages("RCurl")
library("Rcpp")
library(XLConnect);
library(RGoogleAnalytics)
require(httpuv)
St_date='2017-01-01'
En_date='2017-06-05'
client.id <- "374177728354-lukeb737s4smlcsmdf52ninn90ce0t9d.apps.googleusercontent.com"
client.secret <- "EHgTYZ-ZYGEpPbj1gGAcTi0V"
token <- Auth(client.id,client.secret)
token <- Auth(client.id,client.secret)
token <- Auth(client.id,client.secret)
token <- Auth(client.id,client.secret)
rm(list=ls(all=TRUE)) #clear all objects in workspace
library("Rcpp")
library(XLConnect);
library(RGoogleAnalytics)
require(httpuv)
St_date='2017-01-01'
En_date='2017-06-05'
client.id <- "374177728354-lukeb737s4smlcsmdf52ninn90ce0t9d.apps.googleusercontent.com"
client.secret <- "EHgTYZ-ZYGEpPbj1gGAcTi0V"
token <- Auth(client.id,client.secret)
save(token,file="./token_file")
load("./token_file")
token
ValidateToken(token)
Profile <- c( "ga:97753012")
starttime=Sys.time()
query.list <- Init(start.date = as.character(St_date),
end.date = as.character(En_date),
dimensions = "ga:yearMonth, ga:week,ga:channelGrouping, ga:landingPagePath, ga:pageDepth,  ga:deviceCategory",
metrics = "ga:users, ga:sessions, ga:bounceRate, ga:pageviews, ga:avgSessionDuration, ga:totalEvents, ga:goalStartsAll, ga:goal1Starts, ga:goal3Starts, ga:goal6Starts",
start.index = 1,
max.results = 10000,
filters = c("ga:userType==New Visitor"),
#sort = "-ga:transactions",
table.id = PID)
ga.query <- QueryBuilder(query.list)
query.list <- Init(start.date = as.character(St_date),
end.date = as.character(En_date),
dimensions = "ga:yearMonth, ga:week,ga:channelGrouping, ga:landingPagePath, ga:pageDepth,  ga:deviceCategory",
metrics = "ga:users, ga:sessions, ga:bounceRate, ga:pageviews, ga:avgSessionDuration, ga:totalEvents, ga:goalStartsAll, ga:goal1Starts, ga:goal3Starts, ga:goal6Starts",
start.index = 1,
max.results = 10000,
filters = c("ga:userType==New Visitor"),
#sort = "-ga:transactions",
table.id = PID)
for(i in 1:length(Profile)){
flag <- TRUE
PID=Profile[i]
PID
ValidateToken(token)
query.list <- Init(start.date = as.character(St_date),
end.date = as.character(En_date),
dimensions = "ga:yearMonth, ga:week,ga:channelGrouping, ga:landingPagePath, ga:pageDepth,  ga:deviceCategory",
metrics = "ga:users, ga:sessions, ga:bounceRate, ga:pageviews, ga:avgSessionDuration, ga:totalEvents, ga:goalStartsAll, ga:goal1Starts, ga:goal3Starts, ga:goal6Starts",
start.index = 1,
max.results = 10000,
filters = c("ga:userType==New Visitor"),
#sort = "-ga:transactions",
table.id = PID)
ga.query <- QueryBuilder(query.list)
# Extract the data and store it in a data-frame
tryCatch ( ga.dataCount <- nrow(GetReportData(ga.query, token)), error=function(e) flag<<-FALSE)
if (!flag) next
if (ga.dataCount < 10000)     {
# Extract the data and store it in a data-frame
ga.data <- GetReportData(ga.query, token)
} else {
# Extract the data and store it in a data-frame
ga.data <- GetReportData(ga.query, token, paginate_query=TRUE)
}
endtime=Sys.time()
ga.data$PID <- PID
print(PID)
ga.Consolidated <- rbind(ga.Consolidated, ga.data)
}
for(i in 1:length(Profile)){
flag <- TRUE
PID=Profile[i]
PID
ValidateToken(token)
query.list <- Init(start.date = as.character(St_date),
end.date = as.character(En_date),
dimensions = "ga:yearMonth, ga:week,ga:channelGrouping, ga:landingPagePath, ga:pageDepth,  ga:deviceCategory",
metrics = "ga:users, ga:sessions, ga:bounceRate, ga:pageviews, ga:avgSessionDuration, ga:totalEvents, ga:goalStartsAll, ga:goal1Starts, ga:goal3Starts, ga:goal6Starts",
start.index = 1,
max.results = 10000,
#filters = c("ga:userType==New Visitor"),
#sort = "-ga:transactions",
table.id = PID)
ga.query <- QueryBuilder(query.list)
# Extract the data and store it in a data-frame
tryCatch ( ga.dataCount <- nrow(GetReportData(ga.query, token)), error=function(e) flag<<-FALSE)
if (!flag) next
if (ga.dataCount < 10000)     {
# Extract the data and store it in a data-frame
ga.data <- GetReportData(ga.query, token)
} else {
# Extract the data and store it in a data-frame
ga.data <- GetReportData(ga.query, token, paginate_query=TRUE)
}
endtime=Sys.time()
ga.data$PID <- PID
print(PID)
ga.Consolidated <- rbind(ga.Consolidated, ga.data)
}
for(i in 1:length(Profile)){
flag <- TRUE
PID=Profile[i]
PID
ValidateToken(token)
query.list <- Init(start.date = as.character(St_date),
end.date = as.character(En_date),
dimensions = "ga:yearMonth, ga:week,ga:channelGrouping, ga:landingPagePath, ga:pageDepth,  ga:deviceCategory",
metrics = "ga:users, ga:sessions, ga:bounceRate, ga:pageviews, ga:avgSessionDuration, ga:totalEvents, ga:goalStartsAll, ga:goal1Starts, ga:goal3Starts, ga:goal6Starts",
start.index = 1,
max.results = 10000,
filters = "ga:userType%3D%3DNew Visitor",
#sort = "-ga:transactions",
table.id = PID)
ga.query <- QueryBuilder(query.list)
# Extract the data and store it in a data-frame
tryCatch ( ga.dataCount <- nrow(GetReportData(ga.query, token)), error=function(e) flag<<-FALSE)
if (!flag) next
if (ga.dataCount < 10000)     {
# Extract the data and store it in a data-frame
ga.data <- GetReportData(ga.query, token)
} else {
# Extract the data and store it in a data-frame
ga.data <- GetReportData(ga.query, token, paginate_query=TRUE)
}
endtime=Sys.time()
ga.data$PID <- PID
print(PID)
ga.Consolidated <- rbind(ga.Consolidated, ga.data)
}
for(i in 1:length(Profile)){
flag <- TRUE
PID=Profile[i]
PID
ValidateToken(token)
query.list <- Init(start.date = as.character(St_date),
end.date = as.character(En_date),
dimensions = "ga:yearMonth, ga:week,ga:channelGrouping, ga:landingPagePath, ga:pageDepth,  ga:deviceCategory",
metrics = "ga:users, ga:sessions, ga:bounceRate, ga:pageviews, ga:avgSessionDuration, ga:totalEvents, ga:goalStartsAll, ga:goal1Starts, ga:goal3Starts, ga:goal6Starts",
start.index = 1,
segment = "ga:userType==New%20Visitor",
max.results = 10000,
#filters = "ga:userType%3D%3DNew Visitor",
#sort = "-ga:transactions",
table.id = PID)
ga.query <- QueryBuilder(query.list)
# Extract the data and store it in a data-frame
tryCatch ( ga.dataCount <- nrow(GetReportData(ga.query, token)), error=function(e) flag<<-FALSE)
if (!flag) next
if (ga.dataCount < 10000)     {
# Extract the data and store it in a data-frame
ga.data <- GetReportData(ga.query, token)
} else {
# Extract the data and store it in a data-frame
ga.data <- GetReportData(ga.query, token, paginate_query=TRUE)
}
endtime=Sys.time()
ga.data$PID <- PID
print(PID)
ga.Consolidated <- rbind(ga.Consolidated, ga.data)
}
for(i in 1:length(Profile)){
flag <- TRUE
PID=Profile[i]
PID
ValidateToken(token)
query.list <- Init(start.date = as.character(St_date),
end.date = as.character(En_date),
dimensions = "ga:yearMonth, ga:week,ga:channelGrouping, ga:landingPagePath, ga:pageDepth,  ga:deviceCategory",
metrics = "ga:users, ga:sessions, ga:bounceRate, ga:pageviews, ga:avgSessionDuration, ga:totalEvents, ga:goalStartsAll, ga:goal1Starts, ga:goal3Starts, ga:goal6Starts",
start.index = 1,
#segment = "ga:userType==New%20Visitor",
max.results = 10000,
#filters = "ga:userType==New%20Visitor",
#sort = "-ga:transactions",
table.id = PID)
ga.query <- QueryBuilder(query.list)
# Extract the data and store it in a data-frame
tryCatch ( ga.dataCount <- nrow(GetReportData(ga.query, token)), error=function(e) flag<<-FALSE)
if (!flag) next
if (ga.dataCount < 10000)     {
# Extract the data and store it in a data-frame
ga.data <- GetReportData(ga.query, token)
} else {
# Extract the data and store it in a data-frame
ga.data <- GetReportData(ga.query, token, paginate_query=TRUE)
}
endtime=Sys.time()
ga.data$PID <- PID
print(PID)
ga.Consolidated <- rbind(ga.Consolidated, ga.data)
}
for(i in 1:length(Profile)){
flag <- TRUE
PID=Profile[i]
PID
ValidateToken(token)
query.list <- Init(start.date = as.character(St_date),
end.date = as.character(En_date),
dimensions = "ga:yearMonth, ga:week,ga:channelGrouping, ga:landingPagePath, ga:pageDepth,  ga:deviceCategory",
metrics = "ga:users, ga:sessions, ga:bounceRate, ga:pageviews, ga:avgSessionDuration, ga:totalEvents, ga:goalStartsAll, ga:goal1Starts, ga:goal3Starts, ga:goal6Starts",
start.index = 1,
#segment = "ga:userType==New%20Visitor",
max.results = 10000,
filters = "ga:userType==New%20Visitor",
#sort = "-ga:transactions",
table.id = PID)
ga.query <- QueryBuilder(query.list)
# Extract the data and store it in a data-frame
tryCatch ( ga.dataCount <- nrow(GetReportData(ga.query, token)), error=function(e) flag<<-FALSE)
if (!flag) next
if (ga.dataCount < 10000)     {
# Extract the data and store it in a data-frame
ga.data <- GetReportData(ga.query, token)
} else {
# Extract the data and store it in a data-frame
ga.data <- GetReportData(ga.query, token, paginate_query=TRUE)
}
endtime=Sys.time()
ga.data$PID <- PID
print(PID)
ga.Consolidated <- rbind(ga.Consolidated, ga.data)
}
rm(list=ls(all=TRUE))
library("Rcpp")
library(XLConnect);
library(RGoogleAnalytics)
require(httpuv)
St_date='2017-01-01'
En_date='2017-06-05'
client.id <- "374177728354-lukeb737s4smlcsmdf52ninn90ce0t9d.apps.googleusercontent.com"
client.secret <- "EHgTYZ-ZYGEpPbj1gGAcTi0V"
token <- Auth(client.id,client.secret)
save(token,file="./token_file")
load("./token_file")
token
ValidateToken(token)
Profile <- c( "ga:97753012")
for(i in 1:length(Profile)){
flag <- TRUE
PID=Profile[i]
PID
ValidateToken(token)
query.list <- Init(start.date = as.character(St_date),
end.date = as.character(En_date),
dimensions = "ga:yearMonth, ga:week,ga:channelGrouping, ga:landingPagePath, ga:pageDepth,  ga:deviceCategory",
metrics = "ga:users, ga:sessions, ga:bounceRate, ga:pageviews, ga:avgSessionDuration, ga:totalEvents, ga:goalStartsAll, ga:goal1Starts, ga:goal3Starts, ga:goal6Starts",
start.index = 1,
#segment = "ga:userType==New%20Visitor",
max.results = 10000,
filters = "ga:userType==New%20Visitor",
#sort = "-ga:transactions",
table.id = PID)
ga.query <- QueryBuilder(query.list)
# Extract the data and store it in a data-frame
tryCatch ( ga.dataCount <- nrow(GetReportData(ga.query, token)), error=function(e) flag<<-FALSE)
if (!flag) next
if (ga.dataCount < 10000)     {
# Extract the data and store it in a data-frame
ga.data <- GetReportData(ga.query, token)
} else {
# Extract the data and store it in a data-frame
ga.data <- GetReportData(ga.query, token, paginate_query=TRUE)
}
endtime=Sys.time()
ga.data$PID <- PID
print(PID)
ga.Consolidated <- rbind(ga.Consolidated, ga.data)
}
library(openxlsx)
install.packages("openxlsx")
library(openxlsx)
library(plyr)
install.packages("plyr")
library(plyr)
install.packages("dplyr")
q()
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("library(RSiteCatalyst)")
library(library(RSiteCatalyst))
library(RSiteCatalyst)
library(RSiteCatalyst)
install.packages("RSiteCatalyst")
library("RSiteCatalyst")
install.packages("jsonlite")
library("jsonlite")
library(jsonlite)
library(jsonlite)
install.packages("jsonlite")
remove.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
.libPaths()
install zoo
q()
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
x-3
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(a,555,z)
c(z,555,z)
z *2 + 100
my_sqrt<- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
c(1,2,3,4) + c(0,10,1000)
info()
z *2 + 1000
my_div
10
swirl()
rm(list = ls())
library(plotly)
library(dplyr)
install.packages("plotly")
library(plotly)
library(dplyr)
p <- ggplot2::diamonds %>% count(cut, clarity) %>%
plot_ly(x = ~cut, y = ~n, color = ~clarity)
cut
chart_link = api_create(p, filename="bar/colorvar")
library("rdevtools")
rm(list = ls())
setwd("C:\\Users\\sainath.gaddam\\Desktop\\superstore")
library(XLConnect)
wb = readWorksheetFromFile("Superstore.xls","Orders", startRow = 0, startCol = 0, endCol = 0)
X <- data.frame(wb$Time.Spent, wb$Sales)
set.seed(1)
wcss <- vector()
for (i in 1:10)
wcss[i] <- sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type = "b", xlab = "number of clusters", ylab = "#wcss")
kmeans <- kmeans(X, 3)
library(cluster)
clusplot(X, kmeans$cluster, lines = 0, shade =  TRUE, color = TRUE, labels = 2, plotchar = FALSE, span = TRUE, main = paste("Clusters of client"), xlab = "Annual income", ylab = "spending score")
clusplot(X, kmeans$cluster, lines = 0, shade =  TRUE, color = TRUE, labels = 2, plotchar = FALSE, span = TRUE, main = paste("Clusters of client"), xlab = "tome spent", ylab = "sales")
rm(list = ls())
setwd("C:\\Users\\sainath.gaddam\\Desktop\\superstore")
library(XLConnect)
wb = readWorksheetFromFile("Superstore.xls","Orders", startRow = 0, startCol = 0, endCol = 0)
X <- data.frame(wb$Time.Spent, wb$Sales)
wcss <- vector()
for (i in 1:10)
wcss[i] <- sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type = "b", xlab = "number of clusters", ylab = "#wcss")
set.seed(2)
kmeans <- kmeans(X, 3)
library(cluster)
clusplot(X, kmeans$cluster, lines = 0, shade =  TRUE, color = TRUE, labels = 2, plotchar = FALSE, span = TRUE, main = paste("Clusters of client"), xlab = "tome spent", ylab = "sales")
rm(list = ls())
setwd("C:\\Users\\sainath.gaddam\\Desktop\\superstore")
library(XLConnect)
wb = readWorksheetFromFile("Superstore.xls","Orders", startRow = 0, startCol = 0, endCol = 0)
X <- data.frame(wb$Time.Spent, wb$Sales)
wcss <- vector()
for (i in 1:10)
wcss[i] <- sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type = "b", xlab = "number of clusters", ylab = "#wcss")
set.seed(2)
kmeans <- kmeans(X, 3)
library(cluster)
clusplot(X, kmeans$cluster, lines = 0, shade =  TRUE, color = TRUE, labels = 2, plotchar = FALSE, span = TRUE, main = paste("Clusters of client"), xlab = "tome spent", ylab = "sales")
rm(list = ls())
dataset = read.csv("Mall_Customers.csv")
View(dataset)
View(dataset)
View(dataset)
x <- dataset[,2:3]
View(x)
View(x)
set.seed(1)
?kmeans()
wcss <- vector()
for (i in 1:10)
wcss[i] <- sum(kmeans(x, i)$withinss)
plot(1:10, wcss, type = "b", xlab = "number of clusters", ylab = "#wcss")
set.seed(2)
kmeans <- kmeans(x, 4)
library(cluster)
clusplot(x, kmeans$cluster, lines = 0, shade =  TRUE, color = TRUE, labels = 2, plotchar = FALSE, span = TRUE, main = paste("Clusters of client"), xlab = "Age", ylab = "Sales")
View(dataset)
View(dataset)
clusplot(x, kmeans$cluster, lines = 0, shade =  TRUE, color = TRUE, plotchar = FALSE, span = TRUE, main = paste("Clusters of client"), xlab = "Age", ylab = "Sales")
clusplot(x, kmeans$cluster, lines = 0, color = TRUE, plotchar = FALSE, span = TRUE, main = paste("Clusters of client"), xlab = "Age", ylab = "Sales")
setwd("C:/Users/sainath.gaddam/Desktop/Machine Learning A-Z/Part 4 - Clustering/Section 24 - K-Means Clustering")
rm(list = ls())
# K_means clustering
dataset = read.csv("Mall_Customers.csv")
View(dataset)
x <- dataset[,4:5]
#elbow method to find optimal K
set.seed(1)
?kmeans()
wcss <- vector()
for (i in 1:10)
wcss[i] <- sum(kmeans(x, i)$withinss)
plot(1:10, wcss, type = "b", xlab = "number of clusters", ylab = "#wcss")
#k = 5
set.seed(2)
kmeans <- kmeans(x, 5)
library(cluster)
clusplot(x, kmeans$cluster, lines = 0, shade =  TRUE, color = TRUE, labels = 2, plotchar = FALSE, span = TRUE, main = paste("Clusters of client"), xlab = "Annual income", ylab = "spending score")
?clustplot
?clusplot
clusplot(x, diss = TRUE kmeans$cluster, lines = 0, shade =  TRUE, color = TRUE, plotchar = FALSE, span = TRUE, main = paste("Clusters of client"), xlab = "Age", ylab = "Sales")
clusplot(x, kmeans$cluster, lines = 0, shade =  TRUE,   diss = TRUE,color = TRUE, plotchar = FALSE, span = TRUE, main = paste("Clusters of client"), xlab = "Age", ylab = "Sales")
plot(kmeans)
rm(list = ls())
dataset = read.csv("Mall_Customers.csv")
View(dataset)
x <- dataset[,2:3]
set.seed(1)
?kmeans()
wcss <- vector()
for (i in 1:10)
wcss[i] <- sum(kmeans(x, i)$withinss)
rm(list = ls())
dataset = read.csv("Mall_Customers.csv")
View(dataset)
x <- dataset[,4:5]
set.seed(1)
?kmeans()
wcss <- vector()
for (i in 1:10)
wcss[i] <- sum(kmeans(x, i)$withinss)
plot(1:10, wcss, type = "b", xlab = "number of clusters", ylab = "#wcss")
set.seed(2)
kmeans <- kmeans(x, 5)
library(cluster)
clusplot(x, kmeans$cluster, lines = 0, shade =  TRUE, color = TRUE, labels = 2, plotchar = FALSE, span = TRUE, main = paste("Clusters of client"), xlab = "Annual income", ylab = "spending score")
plot(kmeans)
plot(kmeans, data = x)
x
